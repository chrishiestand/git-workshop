If you write code you should be using a version control system. If you
collaborate with other coders, you **really** should be using a version
control system.

Terminology
-----------

-  **Repository**: A collection of files, including a complete history
   and metatdata about those files including: all changes to the files,
   who made those changes, and when the changes were made.
-  **Commit**: A group of files and folders that is a snapshot in time
   of a repository. A commit is triggered by the user. Commits are
   represented by a unique identifier, often a hash ID.
-  **Branch**: Like a branch on a tree, a repository branch splits off
   from the trunk (or master, or default) and development happens
   independently.
-  **Head** or **Tip**: The most recent commit in a branch
-  **Tag**: A human readable label for a specific commit. Tags are
   created when you want to create a substantial reference point: e.g.
   "version1.0" or "Nature-July-2013"

Best Practices
--------------

What to put under version control
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Any text files or small binary files that are a part of your project
that you want version controlled. Images or figures that are part of
your project are fine to include.

Examples of things often version controlled:

-  Python
-  Matlab
-  HTML
-  C
-  Java
-  LaTeX
-  Images used by your project
-  Various system configuration files

What not to put under version control
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-  Very large files (e.g. raw data)
-  Large binary files (e.g. movies)
-  Dynamic Files or Cache

Large files will quickly bloat your repository and slow down repository
updates. Diffs generally cannot be made on binary files, so a small
change to a large file will result in the whole file being stored twice.
And because binary files cannot be parsed by the version controller,
there is less utility in versioning them anyway.

Dynamic files that change automatically or by external processes
generally have little value in being version controlled because it is
not practical to keep them up-to-date.

Fortunately if your project has such files, you can use your version
control's ignore feature to ignore any project files you don't want
version controlled.

That said, any of these may be version controlled if you have a good
reason to do so.

Other tips
~~~~~~~~~~

#. Before you commit, run a diff. Otherwise you may accidentally commit
   debug messages, unrelated changes, or development code that isn't
   ready.
#. All changes within a commit should have a logical unity. This makes
   changes easier to follow and easier to rollback. If you need two
   independent changes, commit one first, then the other.
#. In Unix or Linux, all version control systems use the EDITOR
   environment variable to pick which text editor to use for e.g. commit
   messages. Be sure to set your EDITOR environment variable to
   something you like.
#. If you want your results to be 100% reproducible, you should open
   source your code. After developing code in a DVCS, you can push your
   code to a public `DVCS
   Website <Version_Control_Systems#DVCS_websites>`__

How to write a commit message
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The first line should be 50 characters or less, a short summary.
Followed by a blank line and then a more in depth explanation, wrapped
at around 72 characters.

Example Commit Message
^^^^^^^^^^^^^^^^^^^^^^

Here's a great example taken from
http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html .

::

    Capitalized, short (50 chars or less) summary

    More detailed explanatory text, if necessary.  Wrap it to about 72
    characters or so.  In some contexts, the first line is treated as the
    subject of an email and the rest of the text as the body.  The blank
    line separating the summary from the body is critical (unless you omit
    the body entirely); tools like rebase can get confused if you run the
    two together.

    Write your commit message in the present tense: "Fix bug" and not "Fixed
    bug."  This convention matches up with commit messages generated by
    commands like git merge and git revert.

    Further paragraphs come after blank lines.

    - Bullet points are okay, too

    - Typically a hyphen or asterisk is used for the bullet, preceded by a
      single space, with blank lines in between, but conventions vary here

    - Use a hanging indent

Traditional Version Control Systems (VCS)
-----------------------------------------

| A central repository is typically in one location. You can checkout
copies of the centrally-located repository and then commit your changes.
| RCS (don't use this, it's ancient)
| CVS (don't use this, it's very old and not nearly as good as SVN)
| `Subversion <Subversion>`__ (svn) (note: SVN has recently adopted some
features of a DVCS)

Distributed/Decentralized Version Control (DVCS)
------------------------------------------------

| These differ from the previous group in that there is not necessarily
a central repository. Everytime you clone one of these, you are actually
downloading the entire repository.
| You gain a lot of flexibility if you decide to use one of these.
Because of their flexible nature, they all support excellent branching
and merging features.
|  These are newer than the traditional type. If you are choosing which
VCS to use and you don't have a specific need for SVN, you should use
one of these. git is probably the most popular but it is perhaps the
most difficult to learn. Mercurial (Hg) is easier to learn but not quite
as popular. For more help choosing one see:
`http://en.wikipedia.org/wiki/Comparison_of_revision_control_software <http://en.wikipedia.org/wiki/Comparison_of_revision_control_software>`__.
If you are totally indifferent, this author recommends `git <git>`__
because it is roughly equivalent to the best available and it is the
most popular.

| All three of these are very similar in theory and usage; they just
vary in implementation details:
| `git <git>`__
| `Mercurial <Mercurial>`__ (hg)
| `Bazaar <Bazaar>`__ (bzr)

DVCS Websites
~~~~~~~~~~~~~

| These are places where users can host their own DVCS repositories,
with heavy social-coding features, web-based repository browsers, and
other productivity features.
| If you want a free public repository where your code may be publicly
downloaded or modified (with your approval), use one of these.
| They typically will sell private repositories at a modest price.

| git.snl.salk.edu : private repositories are available for working with
Salk or non-Salk collaborators (but there is no web interface), just ask
for one:
`support@salk.edu <mailto:support@salk.edu?Subject=Git%20Repository%3A>`__
| `github.com <http://github.com/>`__
| `bitbucket.org <http://bitbucket.org/>`__
| `launchpad.net <http://launchpad.net/>`__
| `sourceforge.net <http://sourceforge.net/>`__
| `https://gitorious.org/ <https://gitorious.org/>`__
| `http://code.google.com/ <http://code.google.com/>`__
